
///////////////////////////////////////////////////////////////////////////////
STAGE (1/6): READ BUCHI

  Automaton ABC: controller.disabled().segment, controller.enabled().segment
  Automaton name: armsMonitor
      0.: Init_State: {t0_init} (Marked as inconclusive)
          Transition: (controller.enabled().segment) -> goto t0_q1
      1.: State: {t0_q1} (Marked as inconclusive)
          Transition: (controller.disabled().segment) -> goto t0_q2
      2.: State: {t0_q2} (Marked as inconclusive)

///////////////////////////////////////////////////////////////////////////////
STAGE (2/6): SEARCHING FOR BAD REGIONS
SCC:
   t0_q2
   Marked as bad region!
SCC:
   t0_q1
SCC:
   t0_init

///////////////////////////////////////////////////////////////////////////////
STAGE (3/6): CREATE NFA

  Automaton ABC: controller.disabled().segment, controller.enabled().segment
  Automaton name: armsMonitor
      0.: Init_State: {t0_init}; is accepting (Marked as inconclusive)
          Transition: (controller.enabled().segment) -> goto t0_q1
      1.: State: {t0_q1}; is accepting (Marked as inconclusive)
          Transition: (controller.disabled().segment) -> goto t0_q2
      2.: State: {t0_q2} (Marked as BAD)

///////////////////////////////////////////////////////////////////////////////
STAGE (4/6): CREATE DFA

  Automaton ABC: controller.disabled().segment, controller.enabled().segment
  Automaton name: armsMonitor
      0.: State: {Empty_State}; is accepting (Marked as GOOD)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto Empty_State
      1.: State: {t0_q2} (Marked as BAD)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto Empty_State
      2.: State: {t0_q1}; is accepting (Marked as inconclusive)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto t0_q2
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto t0_q2
      3.: Init_State: {t0_init}; is accepting (Marked as inconclusive)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto t0_q1
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto t0_q1

///////////////////////////////////////////////////////////////////////////////
STAGE (5/6): CREATING FSM

  Automaton ABC: controller.disabled().segment, controller.enabled().segment
  Automaton name: armsMonitor
      0.: State: {Empty_State}; is accepting (Marked as BAD)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto Empty_State
      1.: State: {t0_q2} (Marked as GOOD)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto Empty_State
      2.: State: {t0_q1}; is accepting (Marked as inconclusive)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto t0_q2
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto Empty_State
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto t0_q2
      3.: Init_State: {t0_init}; is accepting (Marked as inconclusive)
          Transition: (!(controller.disabled().segment)) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (controller.disabled().segment) && (!(controller.enabled().segment)) -> goto Empty_State
          Transition: (!(controller.disabled().segment)) && (controller.enabled().segment) -> goto t0_q1
          Transition: (controller.disabled().segment) && (controller.enabled().segment) -> goto t0_q1

///////////////////////////////////////////////////////////////////////////////
STAGE (6/6): GENERATING MONITOR

	The monitor may eventually yield a verdict!

///////////////////////////////////////////////////////////////////////////////
